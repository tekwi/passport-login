{
  "_args": [
    [
      "../../../alexa-app-server",
      "/work/ext2/mws/src"
    ]
  ],
  "_from": "../../../alexa-app-server",
  "_id": "alexa-app-server@2.2.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/alexa-app-server",
  "_phantomChildren": {
    "accepts": "1.0.0",
    "buffer-crc32": "0.2.1",
    "escape-html": "1.0.1",
    "fresh": "0.2.2",
    "merge-descriptors": "0.0.2",
    "methods": "0.1.0",
    "mime": "1.2.11",
    "path-to-regexp": "0.1.2",
    "qs": "0.6.6",
    "range-parser": "1.0.0",
    "raw-body": "1.1.7",
    "send": "0.2.0",
    "serve-static": "1.0.1",
    "type-is": "1.1.0",
    "utils-merge": "1.0.0"
  },
  "_requested": {
    "name": null,
    "raw": "../../../alexa-app-server",
    "rawSpec": "../../../alexa-app-server",
    "scope": null,
    "spec": "/work/alexa-app-server",
    "type": "directory"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "file:../../../alexa-app-server",
  "_shasum": "0577df6699552efa83aa053504bcf3be6a3d12c4",
  "_shrinkwrap": null,
  "_spec": "../../../alexa-app-server",
  "_where": "/work/ext2/mws/src",
  "author": {
    "name": "Matt Kruse"
  },
  "dependencies": {
    "alexa-app": "^2.1.0",
    "bluebird": "^2.9.34",
    "body-parser": "~1.0.1",
    "ejs": "~0.7.1",
    "express": "~4.0.0",
    "hotswap": "^1.1.0"
  },
  "description": "A web server module for Alexa (Amazon Echo) apps (skills) using Node.js, Express, and alexa-app",
  "devDependencies": {
    "supervisor": "^0.6.0"
  },
  "gitHead": "8255bf7e849082e93c4d3a898230101ddf2aa7f1",
  "main": "index.js",
  "name": "alexa-app-server",
  "optionalDependencies": {},
  "readme": "# alexa-app-server\n\nAn Alexa App (Skill) Server module using Node.js and the [alexa-app](https://www.npmjs.com/package/alexa-app) module\n\n## Installation\n\n\tnpm install\n\n## Usage\n\n```javascript\nvar AlexaAppServer = require('alexa-app-server');\nAlexaAppServer.start({\n\tserver_root:__dirname,     // Path to root\n\tpublic_html:\"public_html\", // Static content\n\tapp_dir:\"apps\",            // Where alexa-app modules are stored\n\tapp_root:\"/alexa/\",        // Service root\n\tport:80                    // What port to use, duh\n});\n```\n\n\n## Summary\n\nThe alexa-app-server module offers a stand-alone web server to host Alexa Apps (Skills). Think of it as a simple \"container\" that allows you to easily publish multiple Alexa Apps with one server. The apps themselves are independent modules, written using the [alexa-app](https://www.npmjs.com/package/alexa-app) module framework.\n\nThe server can also serve static web site content, and offers a built-in Alexa App debugger/simulator. This allows you to test your skill using a web browser and view the responses, without actually using the Echo.\n\nTo be clear: This is the container to easily host multiple apps. This module does not help you write the Alexa Apps (Skills) themselves. That is what the [alexa-app](https://www.npmjs.com/package/alexa-app) module is for.\n\n## Key Points\n\n- Multiple apps can be hosted on a single server\n  - Apps are stored in the /apps directory by default\n  - Each app is a stand-alone Node module, built using the alexa-app framework\n  - Each app must export its alexa-app instance to be loaded into the server\n  - package.json contains information about the app, including (optionally) the appId\n  - The hotswap module reloads code changes to apps, if they set module.change_code=1\n- Built-in Echo Simulator \n  - Debug apps by issuing a GET request to the app endpoints\n  - Send simulated requests to your app, view the JSON response\n  - Session variables are automatically maintained between requests\n  - Send intent requests and set slot values\n  - View generated schema and utterances\n\n## Starting The Server\n\nYou can either get a reference to an AlexaAppServer instance, or you can use the start() method shortcut. Getting a reference allows you to inspect or change the server object later.\n\n```javascript\nvar AlexaAppServer = require('alexa-app-server');\nvar server = new AlexaAppServer( {port:80,debug:false} );\nserver.start();\nserver.express.use('/test',function(req,res){ res.send(\"OK\"); });\n```\n\n```javascript\nvar AlexaAppServer = require('alexa-app-server');\nAlexaAppServer.start( {port:8080} );\n```\n\n## Configuration Options\n\nThe start() method accepts a configuration object. The defaults are shown below.\n\n```javascript\nrequire('alexa-app-server').start({\n\t// In order to start the server from a working directory other than\n\t// where your server.js file, you need to provide Node the full path \n\t// to your server's root directory. The easiest way is to use  __dirname\n\tserver_root : __dirname,\n\t\n\t// A directory containing static content to serve as the document root.\n    // This directory is relative to the script using alexa-app-server, not \n\t// relative to the module directory.\n    public_html : \"public_html\",\n    \n    // A directory containing Alexa Apps. This directory should contain one \n\t// or more subdirectories. Each subdirectory is a stand-alone Alexa App \n\t// built with the alexa-app framework. These directories are each \n\t// processed during server startup and hooked into the server.\n    app_dir : \"apps\",\n    \n    // The prefix to use for all Alexa Apps. For example, you may want all \n\t// your Alexa endpoints to be accessed under the \"/api/\" path off the \n\t// root of your web server.\n    app_root : \"/alexa/\",\n\t\n\t// The directory containing server-side processing modules (see below)\n\tserver_dir : \"server\",\n    \n    // The port the server should bind to\n    port : 80,\n    \n    // By default, GET requests to Alexa App endpoints will show the \n\t// debugger UI. This can be disabled.\n    debug : true,\n    \n    // By default, some information is logged with console.log(), which can be disabled\n    log : true,\n    \n    // The pre() method is called after the express server has been instantiated, \n\t// but before and Alexa Apps have been loaded. It is passed the AlexaAppServer \n\t// object itself.\n    pre : function(appServer) { },\n    \n    // The post() method is called after the server has started and the start() method \n\t// is ready to exit. It is passed the AlexaAppServer object itself.\n    post : function(appServer) { },\n\t\n\t// Like pre(), but this function is fired on every request, but before the \n\t// application itself gets called. You can use this to load up user details before\n\t// every request, for example, and insert it into the json request itself for\n\t// the application to use.\n\t// If it returns a falsy value, the request json is not changed.\n\t// If it returns a non-falsy value, the request json is replaced with what was returned.\n\t// If it returns a Promise, request processing pauses until the Promise resolves.\n\t//    The value passed on by the promise (if any) replaces the request json.\n\tpreRequest : function(json,request,response) { },\n\t\n\t// Like post(), but this function is fired after every request. It has a final \n\t// opportunity to modify the JSON response before it is returned back to the\n\t// Alexa service.\n\t// If it returns a falsy value, the response json is not changed.\n\t// If it returns a non-falsy value, the response json is replaced with what was returned.\n\t// If it returns a Promise, response processing pauses until the Promise resolves.\n\t//    The value passed on by the promise (if any) replaces the response json.\n\tpostRequest : function(json,request,response) { },\n\t\n\t//Enables https support. Note httpsPort, privateKey, and certificate are needed.\n\thttpsEnabled : true,\n\t\n\t//The https port the server will bind to. No default. Must be set if httpsEnable = true\n\thttpsPort : 443,\n\t\n\t//privateKey filename. This file must reside in the sslcert folder under the root of the project. Must be set if httpsEnable = true\n\tprivateKey:'private-key.key',\n\t\n\t//certificate filename. This file must reside in the sslcert folder under the root of the project. Must be set if httpsEnable = true\n\tcertificate:'cert.cer'\n\n});\n```\n\n## Enabling HTTPS \n\nYou can enable HTTPS support for the app-server using the instructions below.\n\n\nGenerate a x509 SSL Certificate using the following commands:\n\n```\nopenssl genrsa -out private-key.pem 1024\nopenssl req -new -x509 -key private-key.pem -out cert.cer -days 365 --generates the certificate\n```\n\nThen add the following properties the to config (currently in server.js) that creates the server. Place the two generated files in the sslcert directory.\n\t\n```javascript\nAlexaAppServer.start( {\n\thttpsPort:443,\n\thttpsEnabled:true,\n\tprivateKey:'private-key.pem',\n\tcertificate:'cert.cer'\n\t}\n} );\n```\n\n\n## Debugging With The Echo Simulator\n\nEach app (skill) is available at a url endpoint on the server, and responds to POST requests from the Echo. If you load an app's endpoint in your browser with a GET request, it will display an echo simulator that can be used to debug your application. With it, you can send different request types to your app, load slots with values you specify, etc and see the actual generated JSON output from your application.\n\n## View Generated Schema And Utterances\n\nIn the Echo Simulator, your application's schema definition and example utterances are displayed. These can be directly pasted into the Amazon Developer interface when defining your skill.\n\nYou can also get the schema and utterances directly from your endpoint url using url parameters:\n```\nGET /your/app/endpoint?schema\nGET /your/app/endpoint?utterances\n```\n\n## Dynamic Server-side Functionality\n\nMost servers will need some server-side processing logic. For example, to handle logins, or process forms, etc. You can specify a directory containing files that define server-side functionality by hooking into express. These files are stand-alone modules that export a single function that the framework calls. An example is below and in the \"examples/server/\" directory.\n\nThe default directory used to hold these modules is \"server/\" but you can change this by using the \"server_dir\" configuration parameter, as shown above.\n\nexamples/server/login.js\n\n```javascript\nmodule.exports = function(express,alexaAppServerObject) {\n\texpress.use('/login',function(req,res) {\n\t\tres.send(\"Imagine this is a dynamic server-side login action\");\n\t});\n};\n```\n\n## Example App Structure\n\nThis is an example directory structure of what a complete app server might look like.\n\n```\n.\n+--- server.js\n+--- sslcert\n+--- apps\n     +--- alexa-app-1\n          +--- package.json\n          +--- index.js\n          +--- node_modules\n     +--- alexa-app-2\n          +--- package.json\n          +--- index.js\n          +--- node_modules\n+--- public_html\n     +--- index.html\n```\n\n## Examples\n\nSee example application in the \"examples\" directory.\n\n## History\n\n- 2.2.4 - Sep 13, 2015\n  - Added HTTPS Support\n  \n- 2.2.3 - Aug 19, 2015\n  - Added the ability to retrieve schema and utterances output directly using url parameters\n    - Example: /your/app/endpoint?schema\n\n- 2.2.2 - Aug 18, 2015\n  - Changed preRequest() and postRequest() to allow them to return a Promise if they perform async operations\n  \n",
  "readmeFilename": "README.md",
  "version": "2.2.4"
}
